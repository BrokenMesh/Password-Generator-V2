@implements IDisposable

@inject AppStateService AppState

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-sm-12 text-left">
                <h5 class="card-category">Password-Seed</h5>
                <h2 class="card-title">V2 Seed Password</h2>
            </div>
        </div>
    </div>
    <div class="card-body">
        <div style="height: 200px;">
            <div class="pwd-v2-container">
                <div class="pwd-v2-centered">
                    <label>Passcode</label>
                    <div class="pwd-v2-input">
                        @for (var index = 0; index < AppState.V2Seed.Count; index++) {
                            int i = index;
                            var item = AppState.V2Seed[i];
                            <EmojiInput SelectedItem="item" OnSelectedChanged="@((value) => AppState.SetV2Key(i, value))" />
                        }
                    </div>
                    <small for="v1-pwd">The V2 passcode is specifically designed for use with the generator and avoids familiar formats to ensure the passcode never matches passwords used in other services.</small>
                    @if (AppState.V2Seed.Any(v => v == null)) {
                        <small for="v1-pwd" class="text-danger">All fields must be filled in.</small>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    protected override void OnInitialized() {
        AppState.V2SeedChanged += OnV2KeyChanged;
    }

    public void Dispose() {
        AppState.V2SeedChanged -= OnV2KeyChanged;
    }

    public async Task OnV2KeyChanged() {
        await InvokeAsync(StateHasChanged);
    }
}
