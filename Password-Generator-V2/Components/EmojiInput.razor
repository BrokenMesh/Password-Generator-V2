@inject AppStateService AppState
@inject IJSRuntime JS

<div class="flyout-container" id="flyout-container-@(Id)">
    <div class="flyout-input" @onclick="@(() => SetShow(!isFlyoutOpen))">
        @if (SelectedItem != null) {
            @(SelectedItem.Emoji)
        }
    </div>
    <div class="flyout-menu @(isFlyoutOpen ? "open" : "")">
        <div class="flyout-content">
            @if (AppState.EmojiLookup != null) {
                @foreach (var i in AppState.EmojiLookup.lookup) {
                    <div @onclick="@(() => SelectElement(i))" class="flyout-item">@(i.Emoji)</div>
                }
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public EmojiItem? SelectedItem { get; set; } = null;

    private bool isFlyoutOpen = false;

    private IJSObjectReference? module;

    private readonly Guid Id = Guid.NewGuid();

    protected override void OnInitialized() {
        AppState.EmojiLookupChanged += EmojiLookupChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if(firstRender)  {
            module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/EmojiInput.razor.js");
            StateHasChanged();
        }
    }

    public void Dispose() {
        AppState.EmojiLookupChanged -= EmojiLookupChanged;
        module?.DisposeAsync();
    }

    private async Task EmojiLookupChanged() {
        await InvokeAsync(StateHasChanged);
    }

    private void SelectElement(EmojiItem _i) {
        SelectedItem = _i;
    }

    private async Task SetShow(bool _v) {
        isFlyoutOpen = _v;

        if (module == null) return;
        var _objectRef = DotNetObjectReference.Create(this);

        string _elementId = "flyout-container-" + Id;

        if (isFlyoutOpen) {
            await module.InvokeVoidAsync("addClickOutsideListener", _elementId, _objectRef);
        }
        else {
            await module.InvokeVoidAsync("removeClickOutsideListener", _elementId);
        }

        StateHasChanged();
    }

    [JSInvokable]
    public async Task OnOutsideClick() => await SetShow(false);
    
}
